{
    attributes = (
        {columnName = addressID; name = addressID; prototypeName = artificialKey; }, 
        {
            allowsNull = Y; 
            columnName = alternateTelephone; 
            name = alternateTelephone; 
            prototypeName = telephone; 
        }, 
        {columnName = customerID; name = customerID; prototypeName = artificialKey; }, 
        {
            columnName = email; 
            externalType = char; 
            name = email; 
            valueClassName = NSString; 
            width = 40; 
        }, 
        {
            columnName = firstName; 
            externalType = char; 
            name = firstName; 
            valueClassName = NSString; 
            width = 40; 
        }, 
        {
            columnName = lastName; 
            externalType = char; 
            name = lastName; 
            valueClassName = NSString; 
            width = 40; 
        }, 
        {
            columnName = loginName; 
            externalType = char; 
            name = loginName; 
            valueClassName = NSString; 
            width = 20; 
        }, 
        {
            adaptorValueConversionMethodName = encryptedPassword; 
            columnName = password; 
            externalType = char; 
            factoryMethodArgumentType = EOFactoryMethodArgumentIsNSString; 
            name = password; 
            valueClassName = Password; 
            valueFactoryMethodName = "decryptPassword:"; 
            width = 20; 
        }, 
        {columnName = telephone; name = telephone; prototypeName = telephone; }, 
        {
            allowsNull = Y; 
            columnName = title; 
            externalType = char; 
            name = title; 
            valueClassName = NSString; 
            width = 4; 
        }
    ); 
    attributesUsedForLocking = (
        customerID, 
        title, 
        firstName, 
        lastName, 
        email, 
        loginName, 
        password, 
        telephone, 
        alternateTelephone, 
        addressID
    ); 
    className = EOGenericRecord; 
    classProperties = (
        title, 
        firstName, 
        lastName, 
        email, 
        loginName, 
        password, 
        telephone, 
        alternateTelephone, 
        orders, 
        address
    ); 
    externalName = tCustomer; 
    fetchSpecificationDictionary = {}; 
    internalInfo = {
        _clientClassPropertyNames = (
            title, 
            firstName, 
            lastName, 
            email, 
            loginName, 
            password, 
            telephone, 
            alternateTelephone
        ); 
    }; 
    name = Customer; 
    primaryKeyAttributes = (customerID); 
    relationships = (
        {
            destination = Address; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = addressID; sourceAttribute = addressID; }); 
            name = address; 
        }, 
        {
            deleteRule = EODeleteRuleDeny; 
            destination = Order; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = customerID; sourceAttribute = customerID; }); 
            name = orders; 
            ownsDestination = Y; 
        }
    ); 
}
